{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","this","props","title","question","content","state","required","className","style","display","type","webkitDirectory","directory","startsWith","contents","split","slice","radios","Array","forEach","contentName","push","checkboxes","params","i","length","paramName","paramDefault","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2788caa9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Card.css'\n\n\nclass Card extends Component {\n\trender() {\n\t\tconst {\n\t\t\ttitle,\n\t\t\tquestion,\n\t\t\tcontent,\n\t\t\tstate,\n\t\t\trequired\n\t\t} = this.props;\n\n\t\tfunction Title() {\n\t\t\tif (required === \"True\") {\n\t\t\t\treturn <div className=\"title required\">{title}</div>\n\t\t\t} else {\n\t\t\t\treturn <div className=\"title optional\">{title}</div>\n\t\t\t}\n\t\t}\n\n\t\tfunction Content() {\n\t\t\tif (content === \"fileSelect\") {\n\t\t\t\treturn <div className=\"content\"><input type=\"file\"/></div>\n\t\t\t} else if (content === \"directorySelect\") {\n\t\t\t\treturn <div className=\"content\"><input type=\"file\" webkitDirectory directory /></div>\n\t\t\t} else if (content.startsWith(\"radio\")) {\n\t\t\t\tconst contents = content.split(\" \").slice(1,)\n\t\t\t\tvar radios = Array([])\n\t\t\t\tcontents.forEach (contentName => {\n\t\t\t\t\tradios.push(<div className=\"content radio\"><input type=\"radio\"/>{contentName}</div>)\n\t\t\t\t})\n\t\t\t\treturn radios\n\t\t\t} else if (content.startsWith(\"checkbox\")) {\n\t\t\t\tconst contents = content.split(\" \").slice(1,)\n\t\t\t\tvar checkboxes = Array([])\n\t\t\t\tcontents.forEach (contentName => {\n\t\t\t\t\tcheckboxes.push(<div className=\"content checkbox\"><input type=\"checkbox\"/>{contentName}</div>)\n\t\t\t\t})\n\t\t\t\treturn checkboxes\n\t\t\t} else if (content.startsWith(\"param\")) {\n\t\t\t\tconst contents = content.split(\" \").slice(1,)\n\t\t\t\tvar params = Array([])\n\t\t\t\tfor (var i = 0; i < contents.length; i++) {\n\t\t\t\t\tvar paramName = contents[i]\n\t\t\t\t\tvar paramDefault = contents[i+1]\n\t\t\t\t\ti++\n\t\t\t\t\tparams.push(<div className=\"content param\">{paramName}<input type=\"text\" className=\"parambox\" value={paramDefault}/></div>)\n\t\t\t\t}\n\t\t\t\treturn params\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Card\" style={{ display: state ? 'none' : '' }}>\n\t\t\t\t<Title/>\n\t\t\t\t<div className=\"question\">{question}</div>\n\t\t\t\t<Content/>\n\t\t\t\t<div className=\"transition\">\n\t\t\t\t\t<input type=\"button\" className=\"back\" value=\"Back\"/>\n\t\t\t\t\t<input type=\"button\" className=\"Next\" value=\"Next\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card","import React from 'react';\nimport './App.css';\nimport Card from './Card.js'\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n\n      <div className=\"wsiprocess\">\n        <Card\n          title=\"Whole Slide Image\"\n          question=\"Select target WSI.\"\n          content=\"fileSelect\"\n          state=\"\"\n          required=\"True\"\n        />\n        <Card\n          title=\"Task\"\n          question=\"What task will you deal with?\"\n          content=\"radio Classification Detection Segmentation Not-Specified\"\n          state=\"\"\n          required=\"True\"\n        />\n        <Card\n          title=\"Annotation\"\n          question=\"Did you make annotation file?\"\n          content=\"fileSelect\"\n          state=\"\"\n          required=\"False\"\n        />\n        <Card\n          title=\"Inclusion\"\n          question=\"Did you make inclusion file?\"\n          content=\"fileSelect\"\n          state=\"\"\n          required=\"False\"\n        />\n        <Card\n          title=\"Sizes\"\n          question=\"What size do you want the patches to be?\"\n          content=\"param PatchWidth 256 PatchHeight 256 OverlapWidth 1 OverlapHeight 1\"\n          state=\"\"\n          required=\"False\"\n        />\n        <Card\n          title=\"Detail\"\n          question=\"How much do you want the patches to be on the annotation / foreground?\"\n          content=\"param OnAnnotation 1.0 OnForeground 1.0\"\n          state=\"\"\n          required=\"False\"\n        />\n        <Card\n          title=\"Save to\"\n          question=\"Where do you want WSIPROCESS to output the result files?\"\n          content=\"directorySelect\"\n          state=\"\"\n          required=\"False\"\n        />\n        <Card\n          title=\"Check Sample\"\n          question=\"Do you want to check the samples when the script starts / finished?\"\n          content=\"checkbox Start Finished\"\n          state=\"\"\n          required=\"False\"\n        />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}